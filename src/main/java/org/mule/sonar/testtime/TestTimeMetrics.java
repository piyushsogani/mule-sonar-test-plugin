package org.mule.sonar.testtime;

import java.util.Arrays;
import java.util.List;

import org.sonar.api.measures.CoreMetrics;
import org.sonar.api.measures.Metric;
import org.sonar.api.measures.Metrics;

/**
 * Exposes all the metrics generated by the plugin
 */
public final class TestTimeMetrics implements Metrics
{

    public static final Metric AVERAGE_TEST_TIME = new Metric.Builder("average_test_time", "Average test time", Metric.ValueType.MILLISEC)
            .setDescription("Average test execution time")
            .setDirection(Metric.DIRECTION_WORST)
            .setQualitative(true)
            .setDomain(CoreMetrics.DOMAIN_TESTS)
            .create();

    public static final Metric GOOD_TEST_TIME_COUNT = new Metric.Builder("good_test_time_count", "Good execution time", Metric.ValueType.INT)
            .setDescription("Number of good test execution time")
            .setDirection(Metric.DIRECTION_BETTER)
            .setQualitative(true)
            .setDomain(CoreMetrics.DOMAIN_TESTS)
            .create();

    public static final Metric GOOD_TEST_TIME_DENSITY = new Metric.Builder("good_test_time_density", "Good execution time (%)", Metric.ValueType.PERCENT)
            .setDescription("Density of good test execution time")
            .setDirection(Metric.DIRECTION_BETTER)
            .setQualitative(true)
            .setDomain(CoreMetrics.DOMAIN_TESTS)
            .setWorstValue(0.0)
            .setBestValue(100.0)
            .setOptimizedBestValue(true)
            .create();

    public static final Metric UGLY_TEST_TIME_COUNT = new Metric.Builder("ugly_test_time_count", "Ugly execution time", Metric.ValueType.INT)
            .setDescription("Number of ugly test execution time")
            .setDirection(Metric.DIRECTION_WORST)
            .setQualitative(true)
            .setDomain(CoreMetrics.DOMAIN_TESTS)
            .create();

    public static final Metric UGLY_TEST_TIME_DENSITY = new Metric.Builder("ugly_test_time_density", "Ugly execution time (%)", Metric.ValueType.PERCENT)
            .setDescription("Density of ugly test execution time")
            .setDirection(Metric.DIRECTION_WORST)
            .setQualitative(true)
            .setDomain(CoreMetrics.DOMAIN_TESTS)
            .setWorstValue(0.0)
            .setBestValue(100.0)
            .setOptimizedBestValue(true)
            .create();

    public static final Metric BAD_TEST_TIME_COUNT = new Metric.Builder("bad_test_time_count", "Bad execution time", Metric.ValueType.INT)
            .setDescription("Number of bad test execution time")
            .setDirection(Metric.DIRECTION_WORST)
            .setQualitative(true)
            .setDomain(CoreMetrics.DOMAIN_TESTS)
            .create();

    public static final Metric BAD_TEST_TIME_DENSITY = new Metric.Builder("bad_test_time_density", "Bad execution time (%)", Metric.ValueType.PERCENT)
            .setDescription("Density of bad test execution time")
            .setDirection(Metric.DIRECTION_WORST)
            .setQualitative(true)
            .setDomain(CoreMetrics.DOMAIN_TESTS)
            .setWorstValue(0.0)
            .setBestValue(100.0)
            .setOptimizedBestValue(true)
            .create();

    public List<Metric> getMetrics()
    {
        return Arrays.asList(AVERAGE_TEST_TIME, GOOD_TEST_TIME_COUNT, GOOD_TEST_TIME_DENSITY, UGLY_TEST_TIME_COUNT, UGLY_TEST_TIME_DENSITY, BAD_TEST_TIME_COUNT, BAD_TEST_TIME_DENSITY);
    }
}
